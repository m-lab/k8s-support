apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: prometheus-server
  labels:
    run: prometheus-server
spec:
  selector:
    matchLabels:
      run: prometheus-server
  template:
    metadata:
      labels:
        run: prometheus-server
      annotations:
        # Tell prometheus service discovery to scrape the pod containers.
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: prometheus
      nodeSelector:
        mlab/type: cloud
        node-role.kubernetes.io/master: ""

      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      # The kube-controller-manager is launched with flag
      # --configure-cloud-routes=false to avoid issues with the platform
      # bare-metal nodes (which are not in the cloud), but this has the side
      # effect of adding the following taint to all cloud nodes, which we
      # tolerate here, since we need Prometheus running regardless.
      - key: "node.kubernetes.io/network-unavailable"
        operator: "Exists"
        effect: "NoSchedule"

      containers:
      - name: prometheus
        image: prom/prometheus:v2.4.2
        # TODO: enable longer retention once persistent volumes are available.
        #      "--storage.tsdb.retention=2880h",
        args: ["--config.file=/etc/prometheus/prometheus.yml",
               "--storage.tsdb.path=/prometheus",
               "--web.enable-lifecycle"]
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      # TODO: use native k8s persistent volume claims, if possible.
      - name: prometheus-storage
        hostPath:
          path: /mnt/local/prometheus
          type: Directory

      # TODO: use native k8s service entry points, if possible.
      hostNetwork: true
