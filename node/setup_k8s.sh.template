#!/bin/bash

curr_date=$(date +%FT%TZ)
exec 2> /var/log/setup_k8s.log-$curr_date 1>&2
ln --force --symbolic /var/log/setup_k8s.log-$curr_date /var/log/setup_k8s.log

set -euxo pipefail

# This script is intended to be called by epoxy as the action for the last stage
# in the boot process.  The actual epoxy config that calls this file can be
# found at:
#   https://github.com/m-lab/epoxy-images/blob/dev/actions/stage3_coreos/stage3post.json

# This should be the final step in the boot process. Prior to this script
# running, we should have made sure that the disk is partitioned appropriately
# and mounted in the right places (one place to serve as a cache for Docker
# images, the other two to serve as repositories for core system data and
# experiment data, respectively)

# Save the arguments
GCP_PROJECT=${1:?GCP Project is missing.}
# IPV4="$2"  # Currently unused.
HOSTNAME=${3:?Node hostname is missing.}
K8S_TOKEN_URL=${4:?k8s token URL is missing. Node cannot join k8s cluster.}
K8S_TOKEN_ERROR_FILE="/tmp/k8s_token_error"

# Turn the hostname into its component parts.
MACHINE=${HOSTNAME:0:5}
SITE=${HOSTNAME:6:5}
METRO="${SITE/[0-9]*/}"

# Adds /opt/bin (k8s binaries) and /opt/mlab/bin (mlab binaries/scripts) to PATH.
# Also, be 100% sure /sbin and /usr/sbin are in PATH.
export PATH=$PATH:/sbin:/usr/sbin:/opt/bin:/opt/mlab/bin

# Make sure to download any and all necessary auth tokens prior to this point.
# It should be a simple wget from the master node to make that happen.
MASTER_NODE="api-platform-cluster.${GCP_PROJECT}.measurementlab.net"

# Capture K8S version for later usage.
RELEASE=$(kubelet --version | awk '{print $2}')

# TODO(https://github.com/m-lab/k8s-support/issues/29) This installation of
# things into etc should be done as part of cloud-config.yml or ignition or just
# something besides this script.
# Startup configs for the kubelet
# TODO(kinakde): This is transitional. The Ubuntu stage3 image has this baked
# into the image. Once we have migrated fully to Ubuntu, this should be
# removed.
if ! [[ -f /etc/systemd/system/kubelet.service ]]; then
  curl --silent --show-error --location \
      "https://raw.githubusercontent.com/kubernetes/kubernetes/${RELEASE}/build/debs/kubelet.service" \
      > /etc/systemd/system/kubelet.service
fi

# Add node tags to the kubelet so that node metadata is there right at the very
# beginning.
#
# TODO: Add annotations to the node as well as labels. The annotations should
#       contain most of /proc/cmdline as well as the args to this script.
#
# TODO(kinakde): This is transitional. The Ubuntu stage3 image has this baked
# into the image. Once we have migrated fully to Ubuntu, this should be
# removed.
if ! [[ -f /etc/systemd/system/kubelet.service.d/10-kubeadm.conf ]]; then
  mkdir --parents /etc/systemd/system/kubelet.service.d
  curl --silent --show-error --location \
      "https://raw.githubusercontent.com/kubernetes/kubernetes/${RELEASE}/build/debs/10-kubeadm.conf" \
      > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
fi

NODE_LABELS="mlab/machine=${MACHINE},mlab/site=${SITE},mlab/metro=${METRO},mlab/type=physical,mlab/project=${GCP_PROJECT}"
DYNAMIC_CONFIG_DIR="/var/lib/kubelet/dynamic-configs"
sed -ie "s|KUBELET_KUBECONFIG_ARGS=|KUBELET_KUBECONFIG_ARGS=--node-labels=$NODE_LABELS --dynamic-config-dir=$DYNAMIC_CONFIG_DIR |g" \
  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

# Make the directory /etc/kubernetes/manifests. The declaration staticPodPath in
# `staticPodPath` /var/lib/kubelet/config.yaml defines this and is a standard
# for k8s. If it doesn't exist the kubelet logs a message every few seconds that
# it doesn't exist, polluting the logs terribly.
mkdir --parents /etc/kubernetes/manifests

systemctl daemon-reload

# CoreOS machines require this symlink. On Ubuntu machines, things are put in
# the right place to begin with.
#
# TODO(kinakde): This is transitional. The Ubuntu stage3 image has this baked
# into the image. Once we have migrated fully to Ubuntu, this should be
# removed.
if ! [[ -d "/opt/cni" ]]; then
  ln --force --no-dereference --symbolic /usr/cni /opt/cni
fi

# Fetch k8s token via K8S_TOKEN_URL. Curl should report most errors to stderr,
# so write stderr to a file so we can read any error code.
TOKEN=$( curl --fail --silent --show-error -XPOST --data-binary "{}" \
    ${K8S_TOKEN_URL} 2> $K8S_TOKEN_ERROR_FILE )
# IF there was an error and the error was 408 (Request Timeout), then reboot
# the machine to reset the token timeout.
ERROR_408=$(grep '408 Request Timeout' $K8S_TOKEN_ERROR_FILE || :)
if [[ -n $ERROR_408 ]]; then
  /sbin/reboot
fi

# TODO: Stop regenerating the CA on every call to setup_cloud_k8s_master.sh so
# that we can hard-code the CA hash below without having to change it all the
# time.
kubeadm join "${MASTER_NODE}:6443" \
  --v 4 \
  --token "${TOKEN}" \
  --discovery-token-ca-cert-hash sha256:{{CA_CERT_HASH}}

systemctl daemon-reload
systemctl enable kubelet
systemctl start kubelet

echo 'Success: everything we did appeared to work - good luck'
