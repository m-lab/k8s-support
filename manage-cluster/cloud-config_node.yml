#cloud-config

packages:
- containerd
- ebtables
- jq
- iptables
- socat
- vim
package_update: true
package_upgrade: true

write_files:
- path: /etc/ssh/sshd_config
  permissions: 0600
  owner: root:root
  content: |
    Subsystem sftp internal-sftp
    ClientAliveInterval 180
    UseDNS no
    UsePAM yes
    PrintLastLog no # handled by PAM
    PrintMotd no # handled by PAM
    PasswordAuthentication no
    ChallengeResponseAuthentication no
    PermitRootLogin no

- path: /etc/modules
  permissions: 0644
  owner: root:root
  content: |
    overlay
    br_netfilter
    tcp_bbr

# The odd number of 999 because GCE nodes already have a file named
# 99-gce.conf, which, among other things, disables ip forwarding.
- path: /etc/sysctl.d/999-containerd.conf
  permissions: 0644
  owner: root:root
  content: |
    net.ipv4.ip_forward                 = 1
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1

# Configures the fq qdisc on boot. Note that all GCE VMs we create will be
# capable of 10g, even though we may choose to flag the site as 1g in siteinfo
# for other reasons.
- path: /opt/mlab/bin/configure-tc-fq.sh
  permissions: 0744
  owner: root:root
  content: |
    #!/bin/bash
    # Determine the default/primary network interface of the VM.
    IFACE=$(ip -o -4 route show default | awk '{print $5}')
    # For vitual machines we set the fq qdisc maxrate to 10g, here expressed as
    # bytes per second.
    MAXRATE="1250000000"
    # This script writes out a Prometheus metric file which will be collected by the
    # node_exporter textfile collector. Make sure that METRIC_DIR exists.
    METRIC_DIR=/cache/data/node-exporter
    METRIC_FILE=$METRIC_DIR/configure_tc_fq.prom
    METRIC_FILE_TEMP=$(mktemp)
    mkdir -p $METRIC_DIR
    echo -n "node_configure_qdisc_success " > $METRIC_FILE_TEMP
    # Append the passed status code to the temporary metric file, and move the
    # temp metric file to the right location, making it world readable.
    function write_metric_file {
      local status=$1
      echo "$status" >> $METRIC_FILE_TEMP
      mv $METRIC_FILE_TEMP $METRIC_FILE
      chmod 644 $METRIC_FILE
    }
    tc qdisc replace dev $IFACE root fq maxrate "${MAXRATE}bps"
    if [[ $? -ne 0 ]]; then
      echo "Failed to configure qdisc fq on dev ${IFACE} with max rate of: ${MAXRATE}"
      write_metric_file 0
      exit 1
    fi
    # Even though tc's exit code was 0, be 100% sure that the configured value for
    # maxrate is what we expect.
    configured_maxrate=$(tc -json qdisc show dev $IFACE | jq -r '.[0].options.maxrate')
    if [[ $configured_maxrate != $MAXRATE ]]; then
      echo "maxrate of qdisc fq on $IFACE is ${configured_maxrate}, but should be ${MAXRATE}"
      write_metric_file 0
      exit 1
    fi
    write_metric_file 1
    echo "Set maxrate for qdisc fq on dev eth0 to: ${MAXRATE}"

# systemd service for configuring the fq qdisc on boot.
- path: /etc/systemd/system/configure-tc-fq.service
  permissions: 0644
  owner: root:root
  content: |
    [Unit]
    Description=Configures TCP pacing
    After=multi-user.target
    [Service]
    Type=oneshot
    ExecStart=/opt/mlab/bin/configure-tc-fq.sh
    [Install]
    WantedBy=multi-user.target

# Instructs systemd to wait for 180s before shutting down or rebooting to give
# all experiments time to stop serving running tests and Pusher time to upload
# all data.
- path: /etc/systemd/system.conf.d/10-timeoutstopsec.conf
  permissions: 0644
  owner: root:root
  content: |
    [Manager]
    DefaultTimeoutStopSec=180

# A onehost systemd service to check whether a node needs to be rebooted.
- path: /etc/systemd/system/check-reboot.service
  permissions: 0644
  owner: root:root
  content: |
    [Unit]
    Description=Check system uptime, and reboot the machine if it is too long
    [Service]
    Type=oneshot
    ExecStart=/opt/mlab/bin/check-reboot.sh
    [Install]
    WantedBy=multi-user.target

- path: /etc/systemd/system/check-reboot.timer
  permissions: 0644
  owner: root:root
  content: |
    [Unit]
    Description=Run check-reboot.service daily
    [Timer]
    OnCalendar=daily
    [Install]
    WantedBy=multi-user.target

- path: /opt/mlab/bin/check-reboot.sh
  permissions: 0744
  owner: root:root
  content: |
    #!/bin/bash
    # The maximum amount of time, in days, that a machine can be up before it gets
    # automatically rebooted.
    MAX_DAYS_UP=60
    # We use Kured (KUbernetes REboot Daemon) to help manage rolling reboots on the
    # platform. Kured runs as a pod on every node (a DaemonSet) and watches for
    # a configurable "sentinel" file, the existence of which signals that a reboot
    # should be performed. When the file is found Kured queues the node for a
    # reboot. The following value reflects the sentinel file configured for Kured:
    # https://github.com/m-lab/k8s-support/blob/master/k8s/daemonsets/core/kured.jsonnet#L28
    REBOOT_SENTINEL_FILE=/var/run/mlab-reboot
    # Check if the Kured sentinel file already exists. If so, do nothing and exit.
    if [[ -f $REBOOT_SENTINEL_FILE ]]; then
      echo "Reboot sentinel file ${REBOOT_SENTINEL_FILE} already exists. Exiting..."
      exit
    fi
    # The first field in /proc/uptime is the machine's uptime in seconds. Here we
    # convert that to days to make things easier to understand for people.
    days_up=$(awk '{print int($1 / 60 / 60/ 24)}' /proc/uptime)
    if [[ $days_up -gt $MAX_DAYS_UP ]]; then
      echo "Uptime of ${days_up}d exceeds MAX_DAYS_UP=${MAX_DAYS_UP}. Flagging node for reboot..."
      touch "$REBOOT_SENTINEL_FILE"
    else
      echo "Uptime of ${days_up}d does not exceed MAX_DAYS_UP=${MAX_DAYS_UP}. Doing nothing..."
    fi

runcmd:
- sysctl --system
- systemctl restart systemd-modules-load.service
- systemctl enable containerd
- systemctl start containerd
- systemctl enable configure-tc-fq.service
- systemctl start configure-tc-fq.service
- systemctl enable check-reboot.service
- systemctl enable check-reboot.timer

