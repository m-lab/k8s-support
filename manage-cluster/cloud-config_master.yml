#cloud-config

coreos:
  units:
    - name: docker.service
      command: start

    - name: apply-sysctl.service
      command: "start"
      enable: "true"
      content: |
        [Unit]
        Description=Applies sysctl configs in /etc/sysctl.d/

        [Service]
        Type=oneshot
        ExecStart=/sbin/sysctl --system

        [Install]
        WantedBy=multi-user.target

    - name: token-server.service
      command: "start"
      enable: "true"
      content: |
        [Unit]
        Description=token-server
        After=docker.service
        Requires=docker.service

        # Run the k8s-token-server (supporting the ePoxy Extension API), such that:
        #
        #   1) the host root (/) is mounted read-only in the container as /ro
        #   2) the host etc (/etc) is mounted read-only as the container's /etc
        #
        # The first gives access the kubeadm command.
        # The second gives kubeadm read access to /etc/kubernetes/admin.conf.
        [Service]
        TimeoutStartSec=120
        Restart=always
        ExecStartPre=-/usr/bin/docker stop %N
        ExecStartPre=-/usr/bin/docker rm %N
        ExecStart=/usr/bin/docker run --publish 8800:8800 \
                                      --volume /etc:/etc:ro \
                                      --volume /:/ro:ro \
                                      --name %N -- \
                                      measurementlab/k8s-token-server:v0.0 \
                                      -command /ro/opt/bin/kubeadm
        ExecStop=/usr/bin/docker stop %N

        [Install]
        WantedBy=multi-user.target

    - name: gcp-loadbalancer-proxy.service
      command: "start"
      enable: "true"
      content: |
        [Unit]
        Description=gcp-loadbalancer-proxy
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=120
        Restart=always
        ExecStartPre=-/usr/bin/docker stop %N
        ExecStartPre=-/usr/bin/docker rm %N
        ExecStart=/usr/bin/docker run --publish 8080:8080 \
                                      --network host \
                                      --name %N -- \
                                      measurementlab/gcp-loadbalancer-proxy:v1.0 \
                                      -url https://localhost:6443
        ExecStop=/usr/bin/docker stop %N

        [Install]
        WantedBy=multi-user.target

    - name: reboot-node.service
      content: |
        [Unit]
        Description=reboot-node.service

        [Service]
        Type=oneshot
        ExecStart=/opt/bin/reboot-node

    - name: reboot-node.timer
      enable: "true"
      command: "start"
      content: |
        [Unit]
        Description=Run reboot-node.service daily

        [Timer]
        OnCalendar=Mon..Fri 15:00:00

        [Install]
        WantedBy=multi-user.target

write_files:
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    content: |
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp
      ClientAliveInterval 180
      UseDNS no
      UsePAM yes
      PrintLastLog no # handled by PAM
      PrintMotd no # handled by PAM
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      PermitRootLogin no

  # We have run up against "no space left on device" errors, when clearly
  # there is plenty of free disk space. It seems this could likely be related
  # to this:
  # https://github.com/kubernetes/kubernetes/issues/7815#issuecomment-124566117
  # To be sure we don't hit the limit of fs.inotify.max_user_watches, increase
  # it from the default of 8192.
  - path: /etc/sysctl.d/fs_inotify.conf
    permissions: 0644
    owner: root:root
    content: |
      fs.inotify.max_user_watches=131072

  # The smallest of scripts to reboot the machine.
  - path: /opt/bin/reboot-node
    permissions: 0744
    owner: root:root
    content: |
      #!/bin/bash
      REBOOT_DAY=$(cat /etc/reboot-node-day)
      TODAY=$(date +%a)
      ETCD_MEMBERS=$(/usr/bin/etcdctl member list | wc -l)
      if [[ "${REBOOT_DAY}" != "${TODAY}" ]]; then
        echo "Reboot day ${REBOOT_DAY} doesn't equal today: ${TODAY}. Not rebooting."
        exit 0
      fi
      if [[ "${ETCD_MEMBERS}" -lt "3" ]]; then
        echo "There are less than 3 etcd cluster members. Not rebooting."
        exit 1
      fi
      echo "Reboot day ${REBOOT_DAY} equals today: ${TODAY}. Rebooting node."
      /usr/sbin/reboot

